使用GCC（GNU Compiler Collection）编译C程序时，可以通过不同的命令行选项来控制编译的不同阶段。以下是一些常用的GCC选项，以及它们在编译过程的不同阶段的作用：

    预处理结束：
        -E：这个选项告诉GCC只执行预处理阶段，生成预处理后的代码。例如：

        mathematica

    gcc -E source.c -o preprocessed.c

编译结束：

    -S：使用这个选项会在预处理之后执行编译阶段，生成汇编代码。例如：

    vbnet

    gcc -S source.c -o assembly.s

汇编结束：

    -c：这个选项告诉GCC执行预处理和编译阶段，然后生成目标文件（汇编代码的二进制表示）。例如：

    csharp

    gcc -c source.c -o object.o

链接结束：

    默认情况下，GCC将预处理、编译和汇编的结果链接为可执行文件。你可以通过以下方式生成最终的可执行文件：

        gcc source.c -o executable

总结一下，在不同的编译阶段使用不同的GCC选项可以控制编译过程的不同阶段。根据需要，你可以选择在预处理、编译、汇编或链接之后停止编译过程，并生成中间文件或目标文件。


内存中的LLVM IR是编译器作者最常接触的一个形式，也是其最本质的形式。当我们在内存中处理抽象语法树AST时，需要根据当前的项，生成对应的LLVM IR，这也就是编译器前端所做的事。我们的编译器前端可以用许多语言写，LLVM也为许多语言提供了Binding，但其本身还是用C++写的，所以这里就拿C++为例。

LLVM的C++接口在llvm/IR目录下提供了许多的头文件，如llvm/IR/Instructions.h等，我们可以使用其中的Value, Function, ReturnInst等等成千上万的类来完成我们的工作。也就是说，我们并不需要把AST变成一个个字符串，如ret i32 0等，而是需要将AST变成LLVM提供的IR类的实例，然后在内存中交给LLVM后端处理。

而比特码形式和可读形式则是将内存中的LLVM IR持久化的方法。比特码是采用特定格式的二进制序列，而可读形式的LLVM IR则是采用特定格式的human readable的代码。我们可以用

clang -S -emit-llvm test.c
生成可读形式的LLVM IR文件test.ll，采用

clang -c -emit-llvm test.c
生成比特码形式的LLVM IR文件test.bc，采用

llvm-as test.ll
将可读形式的test.ll转化为比特码test.bc，采用

llvm-dis test.bc
将比特码test.bc转化为可读形式的test.ll。

我这个系列，将主要介绍的是可读形式的LLVM IR的语法。

# 目标：依赖文件
#    命令

# 预处理
pre:
	gcc main.c -E -o main.i

# 词法分析
lexer:
	clang -E -Xclang -dump-tokens main.c

# 抽象语法树 - GCC
ast-gcc:
	gcc -fdump-tree-original-raw main.c

# 抽象语法树 - LLVM
ast-llvm:
	clang -E -Xclang -ast-dump main.c

# 控制流图
cfg:
	gcc -O0 -fdump-tree-all-graph main.c

# 中间表示 - GCC
ir-gcc:
	gcc -O0 -fdump-rtl-all-graph main.c

# 中间表示 - LLVM
ir-llvm:
	clang -S -emit-llvm main.c

# 汇编
asm:
	gcc -O0 -o main.S -S -masm=att main.i

# 目标文件
obj:
	gcc -O0 -c -o main.o main.S

# 反汇编目标文件
antiobj:
	objdump -d main.o > main-anti-obj.S
	nm main.o > main-nm-obj.txt

# 可执行文件
exe:
	gcc -O0 -o main main.o

# 反汇编可执行文件
antiexe:
	objdump -d main > main-anti-exe.S
	nm main > main-nm-exe.txt

# 清理生成的文件
clean:
	rm -rf *.c.*

# 清理所有生成的文件
clean-all:
	rm -rf *.c.* *.o *.S *.dot *.out *.txt *.ll *.i main

